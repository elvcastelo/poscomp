{"version":3,"sources":["components/HomeBanner/index.js","components/HomeExamList/ExamBlock.js","components/HomeExamList/index.js","components/HomeTutorial/index.js","components/Navbar/index.js","components/Home/index.js","components/MathContext/index.js","components/ExamQuestion/QuestionItem.js","components/ExamQuestion/index.js","components/Exam/index.js","components/ExamEditor/index.js","serviceWorker.js","index.js"],"names":["HomeBanner","className","ExamBlock","props","allDone","role","aria-label","incomplete","N","examsData","year","length","console","log","questions","HomeExamList","map","exam","to","HomeTutorial","Navbar","Home","MathContext","Context","input","onLoad","onError","MathJax","error","options","tex2jax","inlineMath","displayMath","preview","Text","text","content","QuestionItem","useState","itemColor","setItemColor","style","color","onClick","correct","id","handleClick","item","ExamQuestion","showAnswer","setShowAnswer","checkAnswer","key","question","rightAnswer","ID","area","items","i","explanation","Exam","match","params","data","ExamEditor","Boolean","window","location","hostname","ReactDOM","render","StrictMode","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d9243e54.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nfunction HomeBanner() {\r\n    return (\r\n        <div className=\"home-banner\">\r\n            <h1>SIMCOMP</h1>\r\n            <p>Uma ferramenta para lhe ajudar a estudar para o POSCOMP.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomeBanner;","import React from 'react';\r\nimport './ExamBlock.css';\r\nimport examsData from '../Exam/data/exams.json';\r\n\r\nfunction ExamBlock(props) {\r\n\r\n    const allDone = <span role=\"img\" aria-label=\"completo\">✔️</span>\r\n    const incomplete = <span role=\"img\" aria-label=\"incompleto\">❌</span>\r\n    const N = examsData[props.year].length\r\n    console.log(N)\r\n    \r\n    return (\r\n        <div className=\"home-exams-block\">\r\n            <p className=\"home-exams-block-e\">Edição</p>\r\n            <h1>{props.year}</h1>\r\n            <p>Questões resolvidas: {N} de 70 {props.questions === 70 ? allDone : incomplete}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExamBlock;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './index.css';\r\nimport ExamBlock from './ExamBlock.js';\r\n\r\nfunction HomeExamList() {\r\n\r\n    const exams = [2019, 2018]\r\n\r\n    return (\r\n        <div className=\"home-exams\">\r\n            <h1 className=\"home-exams-title\">Edições Resolvidas</h1>\r\n            <p className=\"home-exams-subtitle\">Selecione uma edição do POSCOMP para visualizar as questões resolvidas.</p>\r\n            <div className=\"home-exams-block-holder\">\r\n                {exams.map(exam => {\r\n                    return <Link to={`/exam/${exam}`}><ExamBlock year={exam} /></Link>\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomeExamList;","import React from 'react';\r\nimport './index.css';\r\n\r\nfunction HomeTutorial() {\r\n    return (\r\n            <div className=\"home-tutorial\">\r\n                <p className=\"home-tutorial-title\">Como usar o SISCOMP?</p>\r\n                <p className=\"home-tutorial-subtitle\">Como contribuir</p>\r\n                <p className=\"home-tutorial-text\">Existem várias formas que você pode ajudar o projeto. Você pode nos \r\n                ajudar desde divulgando nas redes sociais quanto apoiando o projeto no GitHub, desde adicionando novas questões a\r\n                melhorar nosso código fonte, para saber mais informações a respeito de como contribuir leia o README presente\r\n                a página no GitHub.</p>\r\n\r\n                <p className=\"home-tutorial-subtitle\">Como usar</p>\r\n                <p className=\"home-tutorial-text\">É muito fácil, basta selecionar o ano da questão desejada, logo abaixo do \r\n                ano você pode visualizar a quantidade de questões que já foram respondidas - isso é, \r\n                possuem uma explicação para a sua resposta - ao clicar você irá direto para um simulado da prova daquele ano \r\n                contendo apenas as questões que possuem explicações que levam a resposta. Ao tentar resolver a questão você\r\n                pode clicar no item que achar correto e automaticamente a explicação aparecerá, independente de erro ou acerto.</p>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default HomeTutorial;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './index.css';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar\">\r\n          <div className=\"navbar-logo\">SISCOMP</div>\r\n          <Link to=\"/\">Home</Link>\r\n          <Link to=\"/editor\">Editor</Link>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport HomeBanner from '../HomeBanner';\r\nimport HomeExamList from '../HomeExamList';\r\nimport HomeTutorial from '../HomeTutorial';\r\nimport Navbar from '../Navbar';\r\n\r\nfunction Home() {\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            <HomeBanner />\r\n            <HomeExamList />\r\n            <HomeTutorial />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","import MathJax from 'react-mathjax2';\r\n\r\nfunction MathContext(props) {\r\n    return(\r\n        <MathJax.Context \r\n            input='tex'\r\n            onLoad={() => console.log(\"Script carregado!\")}\r\n            onError={ (MathJax, error) => {\r\n                console.log(\"Foi encontrado um erro.\")\r\n            }}\r\n            options={ {\r\n                tex2jax: {\r\n                    inlineMath: [[\"$\", \"$\"]],\r\n                    displayMath: [[\"$$\", \"$$\"]],\r\n                    preview: \"none\"\r\n                }\r\n            }}>\r\n                <MathJax.Text text={ props.content } />\r\n        </MathJax.Context>\r\n    )\r\n}\r\n\r\nexport default MathContext;","import React, { useState } from 'react';\r\nimport './QuestionItem.css';\r\nimport MathContext from '../MathContext';\r\n\r\nfunction QuestionItem(props) {\r\n\r\n    const [itemColor, setItemColor] = useState(\"black\")\r\n\r\n    const handleClick = () => {\r\n        let correct = props.onClick(props.id)\r\n        if (correct) {\r\n            setItemColor(\"green\")\r\n        } else {\r\n            setItemColor(\"red\")\r\n        }\r\n    }\r\n\r\n    const itemsLabel = ['A', 'B', 'C', 'D', 'E']\r\n\r\n    return (\r\n        <div className={`exam-question_item`} style={{ color: itemColor }} onClick={() => handleClick()}>\r\n            <MathContext content={`${itemsLabel[props.id]}) ${props.item}`} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionItem","import React, { useState } from 'react';\r\nimport './index.css';\r\nimport QuestionItem from './QuestionItem';\r\nimport MathContext from '../MathContext';\r\n\r\nfunction ExamQuestion(props) {\r\n\r\n    const [showAnswer, setShowAnswer] = useState(false)\r\n\r\n    const checkAnswer = (key) => {\r\n        setShowAnswer(true)\r\n        if (key !== props.question.rightAnswer) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"exam-question-holder\">\r\n                <p className=\"exam-question_text\"><strong>QUESTÃO {props.question.ID}. {props.question.area}</strong>.</p>\r\n                <MathContext content={props.question.text} />\r\n\r\n                <div className=\"exam-question-items\">\r\n                    {props.question.items.map((item, i) => (\r\n                        <QuestionItem item={item} key={i} id={i} onClick={checkAnswer} />\r\n                    ))}\r\n                </div>\r\n\r\n                {showAnswer ? <div className=\"exam-question-explanation\"><p className=\"exam-question-explanation-e\">Explicação: </p><MathContext content={props.question.explanation} /></div> : \"\"}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ExamQuestion;","import React from 'react';\r\nimport examsData from './data/exams.json';\r\nimport ExamQuestion from '../ExamQuestion';\r\nimport Navbar from '../Navbar';\r\nimport './index.css';\r\n\r\nfunction Exam(props) {\r\n\r\n    const year = props.match.params.year\r\n    const data = year in examsData ? examsData[year] : false\r\n    return (\r\n        <div className=\"exam-holder\">\r\n            <Navbar />\r\n            <h1>POSCOMP {year}</h1>\r\n            {data ? data.map((question) => (\r\n                <ExamQuestion key={question.ID} question={question} />\r\n            )) : <h1>Ainda não existem questões explicadas para essa edição da prova :(</h1>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Exam;","import React from 'react';\r\n\r\nfunction ExamEditor() {\r\n    return (\r\n        <div className=\"exam-editor-holder\">\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExamEditor;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './index.css';\nimport Home from './components/Home';\nimport Exam from './components/Exam';\nimport ExamEditor from './components/ExamEditor';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route path=\"/exam/:year\" component={Exam} />\n        <Route path=\"/editor\" component={ExamEditor} />\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}