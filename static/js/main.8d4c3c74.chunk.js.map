{"version":3,"sources":["components/HomeBanner/index.js","components/HomeExamList/ExamBlock.js","components/HomeExamList/index.js","components/HomeTutorial/index.js","components/Navbar/index.js","components/Home/index.js","components/MathContext/index.js","components/ExamQuestion/QuestionItem.js","components/ExamQuestion/QuestionExplanation.js","components/ExamQuestion/index.js","components/Exam/index.js","components/ExamEditor/index.js","serviceWorker.js","index.js"],"names":["HomeBanner","className","ExamBlock","year","questions","allDone","role","aria-label","incomplete","N","examsData","length","HomeExamList","map","exam","to","HomeTutorial","Navbar","Home","MathContext","content","Context","input","onError","console","log","script","options","tex2jax","inlineMath","displayMath","preview","Text","text","QuestionItem","onClick","id","item","useState","itemColor","setItemColor","handleClick","correct","style","color","tabIndex","onKeyDown","QuestionExplanation","s","explanation","show","references","ref","i","href","target","rel","ExamQuestion","question","showAnswer","setShowAnswer","checkAnswer","key","rightAnswer","ID","area","items","Exam","match","params","data","ExamEditor","textPreview","setTextPreview","JSONTextPreview","replace","onChange","e","value","defaultValue","String","raw","Boolean","window","location","hostname","ReactDOM","render","StrictMode","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d4c3c74.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nfunction HomeBanner() {\r\n  return (\r\n    <div className=\"home-banner\">\r\n      <div className=\"home-banner-text-holder\">\r\n        <h1>SISCOMP</h1>\r\n        <p>Uma ferramenta para lhe ajudar a estudar para o POSCOMP.</p>\r\n      </div>\r\n      <></>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeBanner;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ExamBlock.css';\r\nimport examsData from '../Exam/data/exams.json';\r\n\r\nfunction ExamBlock({ year, questions }) {\r\n  const allDone = <span role=\"img\" aria-label=\"completo\">✔️</span>;\r\n  const incomplete = <span role=\"img\" aria-label=\"incompleto\">❌</span>;\r\n  const N = examsData[year].length;\r\n\r\n  return (\r\n    <div className=\"home-exams-block\">\r\n      <p className=\"home-exams-block-e\">Edição</p>\r\n      <h1>{year}</h1>\r\n      <p>\r\n        Questões resolvidas:\r\n        {' '}\r\n        {N}\r\n        {' '}\r\n        de 70\r\n        {' '}\r\n        {questions === 70 ? allDone : incomplete}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nExamBlock.propTypes = {\r\n  year: PropTypes.string.isRequired,\r\n  questions: PropTypes.arrayOf(PropTypes.shape({\r\n    ID: PropTypes.number.isRequired,\r\n    area: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    items: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    rightAnswer: PropTypes.number.isRequired,\r\n    explanation: PropTypes.string.isRequired,\r\n    references: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  })).isRequired,\r\n};\r\n\r\nexport default ExamBlock;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './index.css';\r\nimport ExamBlock from './ExamBlock';\r\n\r\nfunction HomeExamList() {\r\n  const exams = [2019, 2018];\r\n\r\n  return (\r\n    <div className=\"home-exams\">\r\n      <h1 className=\"home-exams-title\">Edições Resolvidas</h1>\r\n      <p className=\"home-exams-subtitle\">Selecione uma edição do POSCOMP para visualizar as questões resolvidas.</p>\r\n      <div className=\"home-exams-block-holder\">\r\n        {exams.map((exam) => <Link to={`/poscomp/exam/${exam}`}><ExamBlock year={exam} /></Link>)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeExamList;\r\n","import React from 'react';\r\nimport './index.css';\r\n\r\nfunction HomeTutorial() {\r\n  return (\r\n    <div className=\"home-tutorial\">\r\n      <p className=\"home-tutorial-title\">Como usar o SISCOMP?</p>\r\n      <p className=\"home-tutorial-subtitle\">Como contribuir</p>\r\n      <p className=\"home-tutorial-text\">\r\n        Existem várias formas que você pode ajudar o projeto. Você pode nos\r\n        ajudar desde divulgando nas redes sociais quanto apoiando o projeto no GitHub, desde\r\n        adicionando novas questões a melhorar nosso código fonte, para saber mais informações a\r\n        respeito de como contribuir leia o README presente a página no GitHub.\r\n      </p>\r\n\r\n      <p className=\"home-tutorial-subtitle\">Como usar</p>\r\n      <p className=\"home-tutorial-text\">\r\n        É muito fácil, basta selecionar o ano da questão desejada, logo abaixo do\r\n        ano você pode visualizar a quantidade de questões que já foram respondidas - isso é,\r\n        possuem uma explicação para a sua resposta - ao clicar você irá direto para um\r\n        simulado da prova daquele ano contendo apenas as questões que possuem explicações que\r\n        levam a resposta. Ao tentar resolver a questão você pode clicar no item que achar\r\n        correto e automaticamente a explicação aparecerá, independente de erro ou acerto.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeTutorial;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './index.css';\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"navbar-logo\">SISCOMP</div>\r\n      <Link to=\"/poscomp\">Home</Link>\r\n      <Link to=\"/poscomp/editor\">Editor</Link>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport HomeBanner from '../HomeBanner';\r\nimport HomeExamList from '../HomeExamList';\r\nimport HomeTutorial from '../HomeTutorial';\r\nimport Navbar from '../Navbar';\r\n\r\nfunction Home() {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <HomeBanner />\r\n      <HomeExamList />\r\n      <HomeTutorial />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport MathJax from 'react-mathjax2';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction MathContext({ content }) {\r\n  const showError = () => {\r\n    console.log('Foi encontrado um erro.'); // eslint-disable-line no-console\r\n  };\r\n\r\n  return (\r\n    <MathJax.Context\r\n      input=\"tex\"\r\n      onError={() => showError()}\r\n      script=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\"\r\n      options={{\r\n        tex2jax: {\r\n          inlineMath: [['$', '$']],\r\n          displayMath: [['$$', '$$']],\r\n          preview: 'none',\r\n        },\r\n      }}\r\n    >\r\n      <MathJax.Text text={content} />\r\n    </MathJax.Context>\r\n  );\r\n}\r\n\r\nMathContext.propTypes = {\r\n  content: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default MathContext;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './QuestionItem.css';\r\nimport MathContext from '../MathContext';\r\n\r\nfunction QuestionItem({ onClick, id, item }) {\r\n  const [itemColor, setItemColor] = useState('black');\r\n\r\n  const handleClick = () => {\r\n    const correct = onClick(id);\r\n    if (correct) {\r\n      setItemColor('green');\r\n    } else {\r\n      setItemColor('red');\r\n    }\r\n  };\r\n\r\n  const itemsLabel = ['A', 'B', 'C', 'D', 'E'];\r\n\r\n  return (\r\n    <div\r\n      className=\"exam-question_item\"\r\n      style={{ color: itemColor }}\r\n      onClick={() => handleClick()}\r\n      role=\"button\"\r\n      tabIndex={0}\r\n      onKeyDown={() => handleClick()}\r\n    >\r\n      <MathContext content={`${itemsLabel[id]}) ${item}`} />\r\n    </div>\r\n  );\r\n}\r\n\r\nQuestionItem.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  item: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default QuestionItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './QuestionExplanation.css';\r\nimport MathContext from '../MathContext';\r\n\r\nfunction QuestionExplanation({ explanation, show, references }) {\r\n  const showExplanation = (s) => {\r\n    if (s) {\r\n      return (\r\n        <div className=\"exam-question-explanation\">\r\n          <p className=\"exam-question-explanation-e\">Explicação: </p>\r\n          <MathContext content={explanation} />\r\n\r\n          <p className=\"exam-question-explanation-e\">Referências: </p>\r\n          {references.map((ref, i) => (\r\n            <p>\r\n              [\r\n              {i + 1}\r\n              ]\r\n              {' '}\r\n              <a href={ref.href} target=\"_blank\" rel=\"noreferrer\">\r\n                {ref.text}\r\n                .\r\n              </a>\r\n            </p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return <></>;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {showExplanation(show)}\r\n    </div>\r\n  );\r\n}\r\n\r\nQuestionExplanation.propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  explanation: PropTypes.string.isRequired,\r\n  references: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default QuestionExplanation;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './index.css';\r\nimport QuestionItem from './QuestionItem';\r\nimport MathContext from '../MathContext';\r\nimport QuestionExplanation from './QuestionExplanation';\r\n\r\nfunction ExamQuestion({ question }) {\r\n  const [showAnswer, setShowAnswer] = useState(false);\r\n\r\n  const checkAnswer = (key) => {\r\n    setShowAnswer(true);\r\n    if (key !== question.rightAnswer) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"exam-question-holder\">\r\n        <p className=\"exam-question_text\">\r\n          <strong>\r\n            QUESTÃO\r\n            {' '}\r\n            {question.ID}\r\n            .\r\n            {' '}\r\n            {question.area}\r\n          </strong>\r\n          .\r\n        </p>\r\n        <MathContext content={question.text} />\r\n\r\n        <div className=\"exam-question-items\">\r\n          {question.items.map((item) => (\r\n            <QuestionItem item={item} onClick={checkAnswer} />\r\n          ))}\r\n        </div>\r\n\r\n        <QuestionExplanation\r\n          show={showAnswer}\r\n          explanation={question.explanation}\r\n          references={question.references}\r\n        />\r\n\r\n      </div>\r\n      <hr className=\"exam-question-delimiter\" />\r\n    </>\r\n  );\r\n}\r\n\r\nExamQuestion.propTypes = {\r\n  question: PropTypes.shape({\r\n    ID: PropTypes.string.isRequired,\r\n    area: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    items: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    rightAnswer: PropTypes.number.isRequired,\r\n    explanation: PropTypes.string.isRequired,\r\n    references: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default ExamQuestion;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport examsData from './data/exams.json';\r\nimport ExamQuestion from '../ExamQuestion';\r\nimport Navbar from '../Navbar';\r\nimport './index.css';\r\n\r\nfunction Exam({ match }) {\r\n  const { year } = match.params;\r\n  const data = year in examsData ? examsData[year] : false;\r\n\r\n  return (\r\n    <div className=\"exam-holder\">\r\n      <Navbar />\r\n      <h1>\r\n        POSCOMP\r\n        {year}\r\n      </h1>\r\n      {data ? data.map((question) => (\r\n        <ExamQuestion key={question.ID} question={question} />\r\n      )) : <h1>Ainda não existem questões explicadas para essa edição da prova :(</h1>}\r\n    </div>\r\n  );\r\n}\r\n\r\nExam.propTypes = {\r\n  match: PropTypes.shape({\r\n    params: PropTypes.shape({\r\n      year: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default Exam;\r\n","import React, { useState } from 'react';\r\nimport MathContext from '../MathContext';\r\nimport Navbar from '../Navbar';\r\nimport './index.css';\r\n\r\nfunction ExamEditor() {\r\n  const [textPreview, setTextPreview] = useState('$$ \\\\int x^2 dx = \\\\frac{x^3}{3} $$');\r\n  const JSONTextPreview = textPreview.replace(/\\n/g, ' ').replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"exam-editor-holder\">\r\n        <h1 className=\"exam-editor-title\">Editor de Questões</h1>\r\n        <p className=\"exam-editor-subtitle\">Ferramenta para facilitar a adição e edição de questões.</p>\r\n        <textarea className=\"exam-editor-textarea\" onChange={(e) => setTextPreview(e.target.value)} defaultValue={textPreview} />\r\n        <div className=\"exam-editor-preview\">\r\n          <p>Pré-visualização:</p>\r\n          <MathContext content={String.raw`${textPreview}`} />\r\n          <p>Formatação para JSON:</p>\r\n          <p>{JSONTextPreview}</p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ExamEditor;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // eslint-disable-line no-use-before-define\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log( // eslint-disable-line no-console\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config); // eslint-disable-line no-use-before-define\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => { // eslint-disable-line no-param-reassign\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log( // eslint-disable-line no-console\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.'); // eslint-disable-line no-console\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error); // eslint-disable-line no-console\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log( // eslint-disable-line no-console\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message); // eslint-disable-line no-console\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './index.css';\nimport Home from './components/Home';\nimport Exam from './components/Exam';\nimport ExamEditor from './components/ExamEditor';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route path=\"/poscomp/exam/:year\" component={Exam} />\n        <Route path=\"/poscomp/editor\" component={ExamEditor} />\n        <Route path=\"/poscomp\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}